{
  "info": {
    "_postman_id": "7b3c9d2e-4f5a-4b6c-8d9e-1f2g3h4i5j6k",
    "name": "MercadoLibre Challenge API",
    "description": "Colección para probar los endpoints de la API del challenge de MercadoLibre",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Items",
      "description": "Endpoints relacionados con productos",
      "item": [
        {
          "name": "Get Item by ID",
          "item": [
            {
              "name": "Get Item by ID (Valid)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has valid item format\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('item');",
                      "    const item = jsonData.item;",
                      "",
                      "    // ID validation",
                      "    pm.expect(item.id).to.match(/^MLA\\d+$/);",
                      "",
                      "    // Basic structure validation",
                      "    pm.expect(item).to.have.property('title');",
                      "    pm.expect(item).to.have.property('price');",
                      "    pm.expect(item.price).to.have.property('amount');",
                      "    pm.expect(item.price).to.have.property('currency');",
                      "    pm.expect(item).to.have.property('pictures');",
                      "    pm.expect(item.pictures).to.be.an('array');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/api/items/{{itemId}}",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "items", "{{itemId}}"]
                },
                "description": "Obtiene un item específico por su ID"
              }
            },
            {
              "name": "Get Item by ID (Invalid Format)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Invalid ID format error\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.equal('Invalid item ID format. Must start with MLA followed by numbers.');",
                      "    pm.expect(jsonData.error).to.equal('Bad Request');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/api/items/invalid-id",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "items", "invalid-id"]
                },
                "description": "Intenta obtener un item con un ID en formato inválido"
              }
            },
            {
              "name": "Get Item by ID (Not Found)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Item not found error\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.equal('Item not found');",
                      "    pm.expect(jsonData.error).to.equal('Not Found');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/api/items/MLA999999999",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "items", "MLA999999999"]
                },
                "description": "Intenta obtener un item que no existe (ID válido pero no encontrado)"
              }
            }
          ]
        },
        {
          "name": "Get Items by Seller",
          "item": [
            {
              "name": "Get Items by Seller (Valid)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has items array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('items');",
                      "    pm.expect(jsonData.items).to.be.an('array');",
                      "    ",
                      "    // Verify all items belong to the seller",
                      "    const sellerId = Number(pm.request.url.path[4]);",
                      "    jsonData.items.forEach(function(item) {",
                      "        pm.expect(item.seller.id).to.equal(sellerId);",
                      "    });",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/api/items/seller/1",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "items", "seller", "1"]
                },
                "description": "Obtiene todos los items de un vendedor específico"
              }
            },
            {
              "name": "Get Items by Seller (Not Found)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"No items found error\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.equal('No items found for seller');",
                      "    pm.expect(jsonData.error).to.equal('Not Found');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/api/items/seller/999",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "items", "seller", "999"]
                },
                "description": "Intenta obtener items de un vendedor que no existe"
              }
            },
            {
              "name": "Get Items by Seller (Invalid ID)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Invalid seller ID format\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain('Validation failed');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/api/items/seller/abc",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "items", "seller", "abc"]
                },
                "description": "Intenta obtener items con un ID de vendedor inválido"
              }
            }
          ]
        },
        {
          "name": "Create Item",
          "item": [
            {
              "name": "Create Valid Item",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response has valid item format\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('item');",
                      "    const item = jsonData.item;",
                      "",
                      "    // ID validation",
                      "    pm.expect(item.id).to.match(/^MLA\\d+$/);",
                      "",
                      "    // Compare with request data",
                      "    var requestData = JSON.parse(pm.request.body.raw);",
                      "    pm.expect(item.title).to.equal(requestData.title);",
                      "    pm.expect(item.price.amount).to.equal(requestData.price.amount);",
                      "    pm.expect(item.price.currency).to.equal(requestData.price.currency);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    var jsonData = pm.response.json();",
                      "    pm.environment.set(\"itemId\", jsonData.item.id);",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"MacBook Pro M1 Pro 16\\\"\",\n    \"price\": {\n        \"amount\": 2499.99,\n        \"currency\": \"USD\"\n    },\n    \"pictures\": [\n        \"https://example.com/macbook-1.jpg\",\n        \"https://example.com/macbook-2.jpg\"\n    ],\n    \"condition\": \"new\",\n    \"free_shipping\": true,\n    \"available_quantity\": 3,\n    \"seller\": {\n        \"id\": 102,\n        \"name\": \"Apple Premium Reseller\",\n        \"rating\": 4.7\n    },\n    \"description\": \"MacBook Pro 16\\\" con chip M1 Pro, 16GB RAM, 512GB SSD\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/items",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "items"]
                },
                "description": "Crea un nuevo item con datos válidos"
              }
            },
            {
              "name": "Create Item - Invalid Data",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Validation error response\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('error').equal('Bad Request');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"Te\",\n    \"price\": {\n        \"amount\": -100,\n        \"currency\": \"INVALID\"\n    },\n    \"pictures\": [],\n    \"condition\": \"invalid\",\n    \"free_shipping\": \"not-boolean\",\n    \"available_quantity\": 0,\n    \"seller\": {\n        \"id\": -1,\n        \"name\": \"A\",\n        \"rating\": 6\n    }\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/items",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "items"]
                },
                "description": "Intenta crear un item con datos inválidos"
              }
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// You can add pre-request scripts here",
          "// For example, setting up authentication tokens"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// You can add global tests here",
          "pm.test(\"Response time is less than 500ms\", function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(500);",
          "});"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string",
      "description": "URL base de la API (por defecto: localhost)"
    }
  ]
} 